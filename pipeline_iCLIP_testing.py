"""===========================
Pipeline template
===========================

.. Replace the documentation below with your own description of the
   pipeline's purpose

Overview
========

This pipeline computes the word frequencies in the configuration
files :file:``pipeline.ini` and :file:`conf.py`.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.ini` file.
CGATReport report requires a :file:`conf.py` and optionally a
:file:`cgatreport.ini` file (see :ref:`PipelineReporting`).

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_@template@.py config

Input files
-----------

None required except the pipeline configuration files.

Requirements
------------

The pipeline requires the results from
:doc:`pipeline_annotations`. Set the configuration variable
:py:data:`annotations_database` and :py:data:`annotations_dir`.

Pipeline output
===============

.. Describe output files of the pipeline here

Glossary
========

.. glossary::


Code
====

"""
from ruffus import *
import sys
import os
import CGAT.Experiment as E
import CGATPipelines.Pipeline as P

# load options from the config file
PARAMS = P.getParameters(
    ["%s/pipeline.ini" % os.path.splitext(__file__)[0],
     "../pipeline.ini",
     "pipeline.ini"])


# ---------------------------------------------------
# Specific pipeline tasks
    
''' below, use this to change environemtn before calling tool/script
need to change env name from py36 to desired one'''
   
# PATH=/t1-data/user/nsampaio/py36-v1/conda-install/envs/py36-v1/bin
# CONDA_PREFIX=/t1-data/user/nsampaio/py36-v1/conda-install/envs/py36-v1

# Testing Deduplicate
# series of commands to fix bam file names to call UMI
    
    
# series of commands to fix bam file names to call UMI
@transform('*.bam', regex(r'(.*).bam'), r'\1.new.bam')
def umifix(infile, outfile):
    statement = ''' samtools view -h -o %(infile)s.sam %(infile)s &&
    cut -f1 %(infile)s.sam | sed 's/\(.*\):/\1_/' >%(infile)s.names.txt &&
    cut -f 2- %(infile)s.sam > %(infile)s.nonames.txt &&
    paste %(infile)s.names.txt %(infile)s.nonames.txt > %(infile)s.new.sam &&
    samtools view -h -o %(outfile)s %(infile)s.new.sam '''
    P.run()


#samtools sort
@transform(umifix, suffix('.new.bam'), '.sorted.bam')
def samtools_sort(infile, outfile):
    statement = ''' samtools sort %(infile)s -o %(outfile)s
    '''
    P.run()
    
    
# samtools index1
@follows(samtools_sort)
@transform(samtools_sort, suffix('.sorted.bam'), '.sorted.bam.bai')
def index1(infile, outfile):
    statement = ''' samtools index %(infile)s
    '''
    P.run()


# Deduplicate
@follows(index1)
@transform(samtools_sort, regex(r'(.*).sorted.bam'), r'\1.dedup.bam')
def dedup(infile,outfile):
    ''' deduplicate samples based on UMI using umi_tools '''
    statement = '''
    umi_tools dedup -I %(infile)s --output-stats=deduplicated -S %(outfile)s
    '''
    P.run()


# samtools index2
@transform(dedup, suffix('.dedup.bam'), 'dedup.bam.bai')
def index2(infile, outfile):
    ''' creates index deduplicated bam file, generates .bai '''
    statement = '''samtools index %(infile)s
    '''
    P.run()
    
    
# ---------------------------------------------------
# Generic pipeline tasks



def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
